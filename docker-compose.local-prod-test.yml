services:
    postgres_db_dev:
        image: postgres:15-alpine
        container_name: attendance_postgres_dev_prod_test
        environment:
            POSTGRES_USER: devuser
            POSTGRES_PASSWORD: devpassword
            POSTGRES_DB: attendance_dev
        ports:
            - '5432:5432'
        volumes:
            - postgres_dev_data:/var/lib/postgresql/data
        networks:
            - attendance_local_prod_net
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U devuser -d attendance_dev']
            interval: 10s
            timeout: 5s
            retries: 5

    backend:
        container_name: attendance_backend_prod_test
        build:
            context: ./backend
            dockerfile: Dockerfile
        restart: always
        volumes:
            - ./backend/prisma:/app/prisma
        expose:
            - '3001'
        ports:
            - "3001:3001"
        depends_on:
            postgres_db_dev:
                condition: service_healthy
        env_file:
            - ./backend/.env.development
        environment:
            - NODE_ENV=production
        networks:
            - attendance_local_prod_net
        healthcheck:
            test: ['CMD-SHELL', 'wget -q --spider http://localhost:3001/api/v1/health || exit 1']
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s

    frontend:
        container_name: attendance_frontend_prod_test
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                VITE_API_BASE_URL: /api/v1
        restart: always
        expose:
            - '80'
        networks:
            - attendance_local_prod_net
        depends_on:
            - backend

    nginx:
        image: nginx:1.25-alpine
        container_name: attendance_nginx_proxy_test
        restart: always
        ports:
            - '8080:80'
        volumes:
            - ./nginx.reverse-proxy.conf:/etc/nginx/conf.d/default.conf:ro
            - /etc/letsencrypt:/etc/letsencrypt:ro
        depends_on:
            - frontend
            - backend
        networks:
            - attendance_local_prod_net

volumes:
    postgres_dev_data:
        driver: local

networks:
    attendance_local_prod_net:
        driver: bridge
